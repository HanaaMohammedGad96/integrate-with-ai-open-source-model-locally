name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint backend code
      run: |
        cd backend
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test backend imports
      run: |
        cd backend
        python -c "from app.main import app; print('âœ… Backend imports successfully!')"
        
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Test frontend
      run: |
        cd frontend
        npm test -- --passWithNoTests
        
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Start backend server
      run: |
        cd backend
        python run.py &
        sleep 10
        
    - name: Test API endpoints
      run: |
        cd backend
        python test_api.py
        
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Run safety check
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r backend deployment/
        cp -r frontend deployment/
        cp -r .github deployment/
        cp README.md deployment/
        cp .gitignore deployment/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/
        
    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment package created successfully!"
        echo "Ready for deployment to your preferred hosting platform."
